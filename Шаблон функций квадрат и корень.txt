#include <iostream>
#include <cmath>
#include <cstdlib>
#include <typeinfo>

using namespace std;

template <class T> class Num
{
  public:
      T x;
      Num(T n)
        {
          x=n;
        }
      virtual T  get_val()
        {
            return x;
        }
};

template <class T> class Sqr_c:public Num<T>      // дочерний класс через шаблон предка-шаблона
{
  public:
        Sqr_c(T n): Num<T>(n)     //передача аргумента контсруктора наследника конструктору базового класса  котрый требует аргумент при создании объекта!
          {

          }
        T get_val()
          {
              return (sqrt(this->x));
          }
};

template <class T> class Squary:public Num<T>      // дочерний класс через шаблон предка-шаблона
{
  public:
        Squary(T n): Num<T>(n)     //передача аргумента контсруктора наследника конструктору базового класса  котрый требует аргумент при создании объекта!
          {

          }
        T get_val()
          {
              return ((this->x)*(this->x));
          }
};


Num<double>* generation()
{
      switch(rand()%2)
        {
            case 0: return new Squary<double>(rand()%100);
            case 1: return new Sqr_c<double>(rand()%100);
        }
}

int main()
{
    Num<double>ob1(10), *p;
      for(int i=0;i<10;i++)
      {
          p=generation();
          if(typeid(*p)==typeid(Squary<double>))
            {
              cout<<"Type is Squary"<<endl;
            }
          if(typeid(*p)==typeid(Sqr_c<double>))
            {
                cout<<"Type is Sqr_c"<<endl;
            }
          cout<<"value is " <<p->x<<"  "<<p->get_val()<<endl;
      }

}
